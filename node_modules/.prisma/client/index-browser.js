
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.19.0
 * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
 */
Prisma.prismaVersion = {
  client: "2.19.0",
  engine: "c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AreaScalarFieldEnum = makeEnum({
  areaID: 'areaID',
  requirementID: 'requirementID',
  name: 'name'
});

exports.Prisma.AreaRequirementScalarFieldEnum = makeEnum({
  areaID: 'areaID',
  nSubAreas: 'nSubAreas',
  nCourses: 'nCourses',
  nCredits: 'nCredits'
});

exports.Prisma.CommentsScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  GPDID: 'GPDID',
  comment: 'comment',
  date: 'date'
});

exports.Prisma.CourseScalarFieldEnum = makeEnum({
  courseID: 'courseID',
  departID: 'departID',
  name: 'name',
  description: 'description',
  credits: 'credits',
  courseNum: 'courseNum'
});

exports.Prisma.CourseOfferingScalarFieldEnum = makeEnum({
  courseOfferingID: 'courseOfferingID',
  courseID: 'courseID',
  semester: 'semester',
  year: 'year',
  section: 'section'
});

exports.Prisma.CoursePlanScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  valid: 'valid',
  complete: 'complete'
});

exports.Prisma.DegreeRequirementScalarFieldEnum = makeEnum({
  requirementID: 'requirementID',
  departID: 'departID',
  track: 'track',
  versionSemester: 'versionSemester',
  versionYear: 'versionYear',
  totalCredit: 'totalCredit',
  project: 'project',
  thesis: 'thesis',
  timeLimit: 'timeLimit',
  finalRecommended: 'finalRecommended',
  minGPA: 'minGPA'
});

exports.Prisma.DepartmentScalarFieldEnum = makeEnum({
  departmentID: 'departmentID',
  departmentName: 'departmentName'
});

exports.Prisma.ElectiveStatusScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  areaID: 'areaID',
  status: 'status'
});

exports.Prisma.GPDScalarFieldEnum = makeEnum({
  GPDID: 'GPDID',
  departmentID: 'departmentID'
});

exports.Prisma.GradesScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  courseOfferingID: 'courseOfferingID',
  grade: 'grade'
});

exports.Prisma.PrerequisiteScalarFieldEnum = makeEnum({
  courseID: 'courseID',
  prerequisiteID: 'prerequisiteID'
});

exports.Prisma.ProficiencyRequirementScalarFieldEnum = makeEnum({
  requirementID: 'requirementID',
  courseID: 'courseID'
});

exports.Prisma.RequiredCourseScalarFieldEnum = makeEnum({
  requirementID: 'requirementID',
  courseID: 'courseID'
});

exports.Prisma.RequiredStatusScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  courseID: 'courseID',
  status: 'status'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  studentID: 'studentID',
  firstName: 'firstName',
  lastName: 'lastName',
  requirementID: 'requirementID',
  entrySemester: 'entrySemester',
  entryYear: 'entryYear',
  gradSemester: 'gradSemester',
  gradYear: 'gradYear',
  nSemestersInProgram: 'nSemestersInProgram',
  gpa: 'gpa',
  totalCredits: 'totalCredits',
  projectOption: 'projectOption',
  advisor: 'advisor',
  hasGraduated: 'hasGraduated'
});

exports.Prisma.SubAreaScalarFieldEnum = makeEnum({
  areaID: 'areaID',
  minCourses: 'minCourses',
  minCredit: 'minCredit',
  maxCredit: 'maxCredit',
  maxCourse: 'maxCourse',
  name: 'name'
});

exports.Prisma.TimeSlotDayScalarFieldEnum = makeEnum({
  CourseOfferingID: 'CourseOfferingID',
  day: 'day'
});

exports.Prisma.TimeSlotTimeScalarFieldEnum = makeEnum({
  courseOfferingID: 'courseOfferingID',
  startTime: 'startTime',
  endTime: 'endTime'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  userID: 'userID',
  username: 'username',
  password: 'password'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.CourseOffering_semester = makeEnum({
  Fall: 'Fall',
  Winter: 'Winter',
  Spring: 'Spring',
  Summer1: 'Summer1',
  Summer2: 'Summer2'
});

exports.DegreeRequirement_versionSemester = makeEnum({
  Fall: 'Fall',
  Winter: 'Winter',
  Spring: 'Spring',
  SummerI: 'SummerI',
  SummerII: 'SummerII'
});

exports.ElectiveStatus_status = makeEnum({
  Satisfied: 'Satisfied',
  Pending: 'Pending',
  Unsatisfied: 'Unsatisfied'
});

exports.RequiredStatus_status = makeEnum({
  Satisfied: 'Satisfied',
  Pending: 'Pending',
  Unsatisfied: 'Unsatisfied'
});

exports.Student_entrySemester = makeEnum({
  Fall: 'Fall',
  Winter: 'Winter',
  Spring: 'Spring',
  Summer1: 'Summer1',
  Summer2: 'Summer2'
});

exports.Student_gradSemester = makeEnum({
  Fall: 'Fall',
  Winter: 'Winter',
  Spring: 'Spring',
  Summer1: 'Summer1',
  Summer2: 'Summer2'
});

exports.TimeSlotDay_day = makeEnum({
  Monday: 'Monday',
  Tuesday: 'Tuesday',
  Wednesday: 'Wednesday',
  Thursday: 'Thursday',
  Friday: 'Friday',
  Saturday: 'Saturday',
  Sunday: 'Sunday'
});

exports.Prisma.ModelName = makeEnum({
  Area: 'Area',
  AreaRequirement: 'AreaRequirement',
  Comments: 'Comments',
  Course: 'Course',
  CourseOffering: 'CourseOffering',
  CoursePlan: 'CoursePlan',
  DegreeRequirement: 'DegreeRequirement',
  Department: 'Department',
  ElectiveStatus: 'ElectiveStatus',
  GPD: 'GPD',
  Grades: 'Grades',
  prerequisite: 'prerequisite',
  proficiencyRequirement: 'proficiencyRequirement',
  requiredCourse: 'requiredCourse',
  RequiredStatus: 'RequiredStatus',
  Student: 'Student',
  SubArea: 'SubArea',
  TimeSlotDay: 'TimeSlotDay',
  TimeSlotTime: 'TimeSlotTime',
  User: 'User'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
