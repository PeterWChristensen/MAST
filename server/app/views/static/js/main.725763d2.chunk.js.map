{"version":3,"sources":["components/login_screen/LoginScreen.js","http-commons.js","services/courseOfferings.service.js","services/student.service.js","services/coursePlan.service.js","services/course.service.js","components/modal/ModalWindow.js","components/home_screen/GPDHomeScreen.js","components/add_student/AddStudentScreen.js","components/navbar/LoggedInLinks.js","components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","state","email","password","handleChange","e","target","setState","id","value","handleSubmit","preventDefault","className","onSubmit","this","htmlFor","type","Component","axios","create","baseURL","headers","data","http","post","delete","papaparseOptions","header","dynamicTyping","skipEmptyLines","departmentSelectionOptions","ModalWindow","props","handleImportCourseOfferingsFile","fileInfo","courseOfferings","handleImportStudentDataFile","studentData","handleImportStudentDataCoursePlansFile","studentDataCoursePlans","handleImportGradesFile","grades","onFileChange","event","courseInfoFile","files","degreeRequirements","courseInformation","departmentToParse","departmentToParseSemester","departmentToParseYear","handleImportDegreeRequirementsFile","bind","handleImportCourseInformationFile","handleImportDegreeRequirements","handleImportCourseInformation","handleImportCourseOfferings","handleImportStudentData","handleImportGrades","department","slice","push","semester","year","content","fileReader","FileReader","readAsText","onloadend","result","forEach","dep","regexp","RegExp","matchAll","course","courseInfo","split","coursenameSplit","courseIdSplit","courseID","courseName","trim","regexps","regexpr","credits","preReqsArray","includes","match","prereqRow","courseData","departID","name","description","CourseService","then","response","console","log","catch","prereq","prereqInfo","hideModalDialogPopUp","offering","timeslotSplit","timeslot","timeSplit","dayString","startTimeString","endTimeString","offeringCourseID","course_num","courseOfferingID","section","day","startTime","endTime","CourseOfferingsService","i","length","data_temp","studentID","sbu_id","firstName","first_name","lastName","last_name","track","entrySemester","entry_semester","entryYear","entry_year","requirementVersionSemester","requirement_version_semester","requirementVersionYear","requirement_version_year","graduationSemester","graduation_semester","graduationYear","graduation_year","StudentService","plan","data_plan","grade","CoursePlanService","info","courseOfferingIDNum","optionsForDepartment","map","el","modalContents","modalType","to","onClick","modal","accept","onChange","label","onFileLoaded","parserOptions","addStudent","deleteAllStudents","React","GPDHomeScreen","showModalDialogPopUp","showModalDialogPopup","deleteAll","class","href","pathname","AddStudentScreen","nSemestersInProgram","departmentID","options","LoggedInLinks","Navbar","links","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.725763d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LoginScreen extends Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  handleChange = (e) => {\n    const { target } = e;//shorthand for const target = e.target\n\n    this.setState(state => ({\n      ...state,\n      [target.id]: target.value,\n    }));\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div id=\"loginScreen\">\n        <div id=\"loginBanner\" className=\"banner\">\n            MAST  |  Master's Student Tracking<br />\n        </div>\n        <div id=\"loginBox\">\n        <div className=\"row\">\n          <form onSubmit={this.handleSubmit} className=\"col s4 white\">\n          <b id=\"loginTextHeading\">MAST</b>\n            <h5 className=\"loginBoxText\">Login</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"email\" className=\"loginBoxText\">Email: </label>\n              <input className=\"active\" className=\"loginInput\" type=\"email\" name=\"email\" id=\"email\" onChange={this.handleChange} />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"password\" className=\"loginBoxText\">Password: </label>\n              <input className=\"active\"  className=\"loginInput\" type=\"password\" name=\"password\" id=\"password\" onChange={this.handleChange} />\n            </div>\n            <div className=\"input-field\">\n              <button type=\"submit\" id=\"loginButton\">Login</button>\n            </div>\n          </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default  LoginScreen;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:8080\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n\n    }\n});","import http from \"../http-commons\";\n\nclass CourseOfferingsService {\n    create(data) {\n        return http.post(\"/\", data);\n    }\n}\n\nexport default new CourseOfferingsService();","import http from \"../http-commons\";\n\nclass StudentService {\n    create(data) {\n        return http.post(\"/addStudent\", data);\n    }\n\n    deleteAll() {\n        return http.delete(`/`);\n    }\n}\n\nexport default new StudentService();","import http from \"../http-commons\";\n\nclass CoursePlanService {\n    create(data) {\n        return http.post(\"/addCoursePlan\", data);\n    }\n}\n\nexport default new CoursePlanService();","import http from \"../http-commons\";\n\nclass CourseService {\n    create(data) {\n        return http.post(\"/addCourse\", data);\n    }\n}\n\nexport default new CourseService();","import React from 'react';    \nimport { Link } from 'react-router-dom';\nimport CSVReader from \"react-csv-reader\";\nimport CourseOfferingsService from \"../../services/courseOfferings.service\";\nimport StudentService from \"../../services/student.service\";\nimport CoursePlanService from \"../../services/coursePlan.service\";\nimport CourseService from \"../../services/course.service\";\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n};\n\nconst departmentSelectionOptions =  [\"AMS, BMI, CSE, ESE\", \"All Departments\", \"AAS\", \"ACC\", \"AFH\", \"AFS\", \"AMS\", \"ANT\", \"ARH\", \"ARS\", \"BCB\", \"BDA\", \"BEE\", \"BGE\", \n        \"BIO\", \"BME\", \"BMI\", \"BNB\", \"BSB\", \"BUS\", \"CAR\", \"CHE\", \"CHI\", \"CIV\", \"CLT\", \"CME\", \"CSE\", \"CSM\", \"CST\", \"CWL\", \"DAN\", \"DCS\", \"DPA\", \"ECO\", \n        \"EGL\", \"EHM\", \"EMP\", \"ESE\", \"ESL\", \"ESM\", \"ESS\", \"EST\", \"EUR\", \"EXT\", \"FIN\", \"FLA\", \"FLM\", \"FRN\", \"FSY\", \"GEO\", \"GER\", \"GRD\", \"GSS\", \"HAX\", \n        \"HBA\", \"HBH\", \"HBM\", \"HBP\", \"HBY\", \"HCB\", \"HDO\", \"HIS\", \"HPD\", \"HPH\", \"HWC\", \"IAP\", \"IDC\", \"ISE\", \"ITL\", \"JPN\", \"JRN\", \"KOR\", \"LAT\", \"LIN\", \n        \"MAE\", \"MAR\", \"MAR-S\", \"MAT\", \"MBA\", \"MCB\", \"MEC\", \"MKT\", \"MST\", \"MUS\", \"NET\", \"NEU\", \"NUR\", \"OAE\", \"PHI\", \"PHY\", \"POL\", \"POR\", \"PSY\",\n         \"RUS\", \"SCI\", \"SLV\", \"SOC\", \"SPN\", \"SUS\", \"TAF\", \"THR\", \"TMP\", \"VIP\", \"WNS\", \"WRT\", \"WST\"];\n\nclass ModalWindow extends React.Component {  \n    constructor(props){\n        super(props)\n        this.state = {\n            /* These state objects will hold the parsed info from files to be uploaded upon pressing import button */\n            degreeRequirements: \"none\",\n            courseInformation: \"none\",\n            courseOfferings: \"none\",\n            studentData: \"none\",\n            studentDataCoursePlans: \"none\",\n            grades: \"none\",\n            departmentToParse: \"AMS, BMI, CSE, ESE\",\n            departmentToParseSemester: \"Fall\",\n            departmentToParseYear: \"2021\",\n            courseInfoFile: null\n        }\n        this.handleImportDegreeRequirementsFile = this.handleImportDegreeRequirementsFile.bind(this);\n        this.handleImportCourseInformationFile = this.handleImportCourseInformationFile.bind(this);\n        this.handleImportCourseOfferingsFile = this.handleImportCourseOfferingsFile.bind(this);  \n        this.handleImportStudentDataFile = this.handleImportStudentDataFile.bind(this);\n        this.handleImportStudentDataCoursePlansFile = this.handleImportStudentDataCoursePlansFile.bind(this);\n        this.handleImportGradesFile = this.handleImportGradesFile.bind(this);\n        this.handleImportDegreeRequirements = this.handleImportDegreeRequirements.bind(this);\n        this.handleImportCourseInformation = this.handleImportCourseInformation.bind(this);\n        this.handleImportCourseOfferings = this.handleImportCourseOfferings.bind(this);  \n        this.handleImportStudentData = this.handleImportStudentData.bind(this);\n        //this.handleImportStudentDataCoursePlans = this.handleImportStudentDataCoursePlans.bind(this);\n        this.handleImportGrades = this.handleImportGrades.bind(this);\n    }\n\n    /* Following functions handle data from files */\n    handleImportDegreeRequirementsFile(){\n        \n    }\n\n    handleImportCourseInformationFile(){\n        \n    }\n\n    handleImportCourseOfferingsFile = function(data, fileInfo) {\n        this.setState({courseOfferings: data});\n    }\n\n    handleImportStudentDataFile = function(data, fileInfo) {\n        this.setState({studentData: data});\n\n    }\n\n    handleImportStudentDataCoursePlansFile = function(data, fileInfo) {\n        this.setState({studentDataCoursePlans: data});\n\n    }\n\n    handleImportGradesFile = function(data, fileInfo) {\n        this.setState({grades: data});\n    }\n    \n\n    /* Following functions upload data to the database */\n    handleImportDegreeRequirements(){\n    \n    }\n\n    onFileChange = event => {\n        this.setState({courseInfoFile: event.target.files[0]});\n    }\n\n    handleImportCourseInformation(){\n        var department = [];\n        /* Get departments to look for from user specification */\n        if (this.state.departmentToParse === \"AMS, BMI, CSE, ESE\"){\n            department = [\"AMS\", \"BMI\", \"CSE\", \"ESE\"]\n        }\n        else if(this.state.departmentToParse === \"All Departments\"){\n            department = departmentSelectionOptions.slice(2);\n        }\n        else{\n            department.push(this.state.departmentToParse);\n        }\n        /* Search file for each department in the array */\n        var semester = this.state.departmentToParseSemester;\n        var year = this.state.departmentToParseYear;\n        var content = \" \";\n        let fileReader = new FileReader();\n        fileReader.readAsText(this.state.courseInfoFile);\n        fileReader.onloadend = function(e) {\n            content = fileReader.result;\n            department.forEach(function(dep){\n                var regexp = new RegExp(dep + '\\\\s*\\\\d{3}:[^\\\\r]*\\\\r[^\\\\r]*\\\\r[^\\\\r]*\\\\r[^\\\\r]*', 'g');\n                const data = [...content.matchAll(regexp)];\n                data.forEach(function(course){\n                    let courseInfo = course[0].split(\"\\r\");\n                    let coursenameSplit = courseInfo[0].split(\":\");\n                    let courseIdSplit = coursenameSplit[0].split(\" \");\n                    let courseID = courseIdSplit[0] + courseIdSplit[2];\n                    let courseName = coursenameSplit[1].trim();\n                    let regexps = new RegExp('\\\\d*\\\\scredits|\\\\d*\\-?\\–?\\\\d*\\\\s*credits', 'g'); //for credits\n                    let regexpr = new RegExp('[A-Z]{3}\\\\s\\\\d{3}|[A-Z]{3}\\\\d{3}', 'g'); //for prereq\n                    let credits = \"\"\n                    let preReqsArray = []\n                    if(courseInfo[2].includes(\"credits\")){\n                        let creditRow = courseInfo[2].match(regexps);\n                        let creditSplit = creditRow[0].split(\" \");\n                        credits = creditSplit[0];\n                    }\n                    if(courseInfo[2].includes(\"Prerequisites\")){\n                        let prereqRow = [courseInfo[2].match(regexpr)];\n                        if(prereqRow!=null){\n                            preReqsArray = prereqRow;\n                        }\n                    }\n                    var courseData = {\n                        courseID: courseID,\n                        departID: dep,\n                        name: courseName,\n                        description: courseInfo[1],\n                        credits: credits,\n                        semester: semester,\n                        year: year\n                    };\n                    //console.log(courseData);\n                    CourseService.create(courseData)\n                     .then(response => {\n                         this.setState({\n                             courseID: response.courseData.courseID,\n                             departID: response.courseData.departID,\n                             name: response.courseData.name,\n                             description: response.courseData.description,\n                             credits: response.courseData.credits,\n                             semester: response.courseData.semester,\n                             year: response.courseData.year\n                         });\n                         console.log(response.data);\n                     })\n                     .catch(e => {\n                         console.log(e);\n                     });\n                    preReqsArray.forEach(function(prereq) {\n                        let prereqInfo = prereq[0].split(\" \");\n                        let prerequisiteID = prereqInfo[0] + prereqInfo[1];\n                        var prereqData = {\n                            courseID: courseData.courseID,\n                            prerequisiteID: prerequisiteID\n                        };\n                        //console.log(prereqData);\n                    })\n                });\n            }); \n        }\n        this.props.hideModalDialogPopUp();\n    }\n\n    handleImportCourseOfferings(){\n        this.state.courseOfferings.forEach(function (offering) {\n\n            let timeslot = offering.timeslot;\n            let timeslotSplit = timeslot.split(' ');\n            let timeSplit = timeslotSplit[1].split('-');\n            let dayString = timeslotSplit[0];\n            let startTimeString = timeSplit[0];\n            let endTimeString = timeSplit[1];\n            \n            let offeringCourseID = offering.department + offering.course_num;\n            let courseOfferingIDNum = offeringCourseID + offering.semester + offering.year + offering.section;\n            var data = {\n                courseOfferingID: courseOfferingIDNum,\n                courseID: offeringCourseID,\n                semester: offering.semester,\n                year: offering.year,\n                section: offering.section,\n                day: dayString,\n                startTime: startTimeString,\n                endTime: endTimeString\n            };\n            CourseOfferingsService.create(data)\n            .then(response => {\n                this.setState({\n                    courseOfferingID: response.data.courseOfferingID,\n                    courseID: response.data.courseID,\n                    semester: response.data.semester,\n                    year: response.year,\n                    section: response.section, \n                    day: response.day,\n                    startTime: response.startTime,\n                    endTime: response.endTime\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n        });\n        this.props.hideModalDialogPopUp();\n    }\n\n    handleImportStudentData(){\n        var data = this.state.studentData\n        var i\n        for (i = 0; i < data.length; i++) {\n            var data_temp = {\n                studentID: data[i].sbu_id,\n                firstName: data[i].first_name,\n                lastName: data[i].last_name,\n                email: data[i].email,\n                department: data[i].department,\n                track: data[i].track,\n                entrySemester: data[i].entry_semester,\n                entryYear: data[i].entry_year,\n                requirementVersionSemester: data[i].requirement_version_semester,\n                requirementVersionYear: data[i].requirement_version_year,\n                graduationSemester: data[i].graduation_semester,\n                graduationYear: data[i].graduation_year,\n                password: data[i].password\n            };\n            console.log(data_temp)\n            StudentService.create(data_temp)\n            .then(response => {\n                this.setState({\n                    studentID: response.data_temp.studentID,\n                    firstName: response.data_temp.firstName,\n                    lastName: response.data_temp.lastName,\n                    email: response.data_temp.email,\n                    department: response.data_temp.department,\n                    track: response.data_temp.track,\n                    entrySemester: response.data_temp.entrySemester,\n                    entryYear: response.data_temp.entryYear,\n                    requirementVersionSemester: response.data_temp.requirementVersionSemester,\n                    requirementVersionYear: response.data_temp.requirementVersionYear,\n                    graduationSemester: response.data_temp.graduationSemester,\n                    graduationYear: response.data_temp.graduationYear,\n                    password: response.data_temp.password\n                });\n                console.log(response.data_temp);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n        }\n\n        var plan = this.state.studentDataCoursePlans\n        \n        var i\n        for (i = 0; i < plan.length; i++) {\n\n            let offeringCourseID = plan[i].department + plan[i].course_num;\n\n            var data_plan = {\n                studentID: plan[i].sbu_id,\n                courseOfferingID: offeringCourseID,\n                grade: plan[i].grade\n            };\n            console.log(data_plan.studentID)\n            console.log(data_plan.courseOfferingID)\n            console.log(data_plan.grade)\n\n            CoursePlanService.create(data_plan)\n            .then(response => {\n                this.setState({\n                    studentID: response.data_plan.studentID,\n                    courseOfferingID: response.data_plan.courseOfferingID,\n                    grade: response.data_plan.grade\n                });\n                console.log(response.data_plan);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n        }\n\n        this.props.hideModalDialogPopUp();\n    }\n\n    handleImportGrades() {\n        this.state.grades.forEach(function (info) {\n            let offeringCourseID = info.department + info.course_num;\n            let courseOfferingIDNum = offeringCourseID + info.semester + info.year + info.section;\n            console.log(\"courseOfferingIDNum& studentID=\");\n            console.log(courseOfferingIDNum);\n            console.log(info.sbu_id);\n            console.log(info.grade);\n            var data = {\n                studentID: info.sbu_id,\n                courseOfferingID: courseOfferingIDNum,\n                grade: info.grade\n            };\n            console.log(\"Before create service\");            \n            CoursePlanService.create(data)\n            .then(response => {\n                this.setState({\n                    studentID: response.data.studentID,\n                    courseOfferingID: response.data.courseOfferingID,\n                    grade: response.data.grade\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n                console.log(\"Error create service\");\n            });\n            //actually after this. I need to update courseOffering with all the new info such as section etc.\n        });\n        this.props.hideModalDialogPopUp();\n    }\n\n    render(){\n\n        let optionsForDepartment = departmentSelectionOptions.map((el) => <option key={el}>{el}</option>);\n\n        const selectDepartmentToParseCourseInfoHandler = (event) => { \n            this.setState({departmentToParse: event.target.value}); \n        };\n\n        const changeSemesterOptionHandler = (event) => { \n            this.setState({departmentToParseSemester: event.target.value}); \n        }; \n        const changeYearOptionHandler = (event) => { \n            this.setState({departmentToParseYear: event.target.value}); \n        }; \n\n        // Type variable to store modal to display\n        let modalContents = null; \n\n        if(this.props.modalType === \"importDegreeRequirements\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    \n                <br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportDegreeRequirements, this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importCourseInformation\"){\n            modalContents =\n            <div id=\"modalCourseInfo\" className=\"modal\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br>\n                    Choose .txt file to import:</p><br></br>\n                    <input type=\"file\" accept=\".txt\" id=\"scrapeCourseInfoFileButton\" onChange={this.onFileChange}/>\n                    <br></br><br></br>\n                    <p>Specify semester/year:\n                        <select id=\"semesterSelectCourseScrape\" className=\"dropdownSelect\" onChange={changeSemesterOptionHandler}>\n                            <option value=\"Fall\">Fall</option>\n                            <option value=\"Winter\">Winter</option>\n                            <option value=\"Spring\">Spring</option>\n                            <option value=\"Summer\">Summer1</option>\n                            <option value=\"Summer\">Summer2</option>\n                        </select>\n                        <select id=\"yearSelectCourseScrape\" className=\"dropdownSelect\" onChange={changeYearOptionHandler}>\n                            <option value=\"2021\">2021</option>\n                            <option value=\"2020\">2020</option>\n                            <option value=\"2019\">2019</option>\n                            <option value=\"2018\">2018</option>\n                            <option value=\"2017\">2017</option>\n                            <option value=\"2016\">2016</option>\n                            <option value=\"2015\">2015</option>\n                            <option value=\"2014\">2014</option>\n                            <option value=\"2013\">2013</option>\n                            <option value=\"2012\">2012</option>\n                            <option value=\"2011\">2011</option>\n                            <option value=\"2010\">2010</option>\n                            <option value=\"2009\">2009</option>\n                            <option value=\"2008\">2008</option>\n                            <option value=\"2007\">2007</option>\n                            <option value=\"2006\">2006</option>\n                            <option value=\"2005\">2005</option>\n                            <option value=\"2004\">2004</option>\n                            <option value=\"2003\">2003</option>\n                            <option value=\"2002\">2002</option>\n                            <option value=\"2001\">2001</option>\n                            <option value=\"2000\">2000</option>\n                            <option value=\"1999\">1999</option>\n                            <option value=\"1998\">1998</option>\n                            <option value=\"1997\">1997</option>\n                            <option value=\"1996\">1996</option>\n                            <option value=\"1995\">1995</option>\n                            <option value=\"1994\">1994</option>\n                            <option value=\"1993\">1993</option>\n                            <option value=\"1992\">1992</option>\n                            <option value=\"1991\">1991</option>\n                            <option value=\"1990\">1990</option>\n                        </select>\n                    </p>\n                    <p>Select one or all departments to scrape: \n                    <select id=\"scrapeCourseInfoDepartmentSelection\" className=\"dropdownSelect\" onChange={selectDepartmentToParseCourseInfoHandler}>\n                            {optionsForDepartment}\n                    </select>\n                    </p>\n                               \n                <br></br>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportCourseInformation} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importCourseOfferings\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose file to import: \"\n                        onFileLoaded={this.handleImportCourseOfferingsFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportCourseOfferings} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importStudentData\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose student profile file to import: \"\n                        onFileLoaded={this.handleImportStudentDataFile}\n                        parserOptions={papaparseOptions}/>\n                    <CSVReader\n                        label=\"Choose student course plan file to import: \"\n                        onFileLoaded={this.handleImportStudentDataCoursePlansFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportStudentData} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importGrades\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose file to import: \"\n                        onFileLoaded={this.handleImportGradesFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportGrades} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"addStudent\"){\n            modalContents =\n            <div className=\"modal\" id=\"addStudent\" header=\"Add\" >\n                <p id=\"modalDialogMessage\">\n                Do you want to add this student?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.addStudent} >Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >No</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"cancelAddStudent\"){\n            modalContents =\n            <div className=\"modal\" id=\"cancelAddStudent\" header=\"Cancel\"  >\n                <p id=\"modalDialogMessage\">\n                Cancel adding student?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.hideModalDialogPopUp}>Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \n            </div>\n        }\n        else if(this.props.modalType === \"deleteAllStudents\"){\n            modalContents =\n            <div className=\"modal\" id=\"deleteAllStudents\" header=\"Cancel\"  >\n                <p id=\"modalDialogMessage\">\n                Delete all students?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.deleteAllStudents}>Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \n            </div>\n        }\n        return (  \n        <div>\n            <div id = \"modal_background\">\n                    {modalContents}\n            </div>\n        </div>\n        );  \n    }  \n}  \nexport default ModalWindow;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport ModalDialog from '../modal/ModalWindow'\nimport StudentService from \"../../services/student.service\";\n\nclass GPDHomeScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showModalDialogPopup: false,\n            modalType: \"none\"\n        }    \n    }\n\n      //Displays or Hides the Modal Dialog PopUp \n    showModalDialogPopUp = (type) => {\n        this.setState({modalType: type, showModalDialogPopup: true});\n    }\n\n    hideModalDialogPopUp = () => {\n        this.setState({showModalDialogPopup: false});\n    }\n\n    deleteAllStudents() {\n        StudentService.deleteAll()\n        .then(response => {\n            console.log(response.data);\n            this.setState({showModalDialogPopup: false});\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                 {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} deleteAllStudents={this.deleteAllStudents.bind(this)}/> : null} \n                <div id=\"GPDHomepageScreen\">\n                <div class=\"dropdown\">\n                    <button class=\"dropbtn\">Import</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importDegreeRequirements\")}>Degree Requirements</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseInformation\")}>Course Information</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseOfferings\")}>Course Offerings</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importStudentData\")}>Student Data</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importGrades\")}>Grades</a>\n                    </div>\n                    </div>\n                        <a href='/addStudent'><Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link></a>\n                        <button className=\"GPDHomepageButton\" onClick={() => this.showModalDialogPopUp(\"deleteAllStudents\")}> Delete All Student Data</button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n//<Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link>\nexport default GPDHomeScreen;\n","import React, { Component } from 'react';\nimport ModalDialog from '../modal/ModalWindow'\nimport StudentService from \"../../services/student.service\";\n\nclass AddStudentScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            department: \"AMS\",         \n            showModalDialogPopup: false,\n            modalType: \"none\",\n            firstName: \"\",\n            lastName: \"\",\n            id: \"\",\n            email: \"\",\n            track : \"\",\n            entrySemester: \"Fall\",\n            entryYear: \"2021\"\n        }    \n    }\n\n      //Displays or Hides the Modal Dialog PopUp \n    showModalDialogPopUp = (type) => {\n        this.setState({modalType: type, showModalDialogPopup: true});\n    }\n\n    hideModalDialogPopUp = () => {\n        this.setState({showModalDialogPopup: false});\n    }\n\n    addStudent() {\n        var data = {\n            studentID: this.state.id,\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            nSemestersInProgram: 0,\n            email: this.state.email,\n            departmentID: this.state.department,\n            entrySemester: this.state.entrySemester,\n            entryYear: this.state.entryYear\n        };\n        StudentService.create(data)\n            .then(response => {\n                this.setState({\n                    studentID: response.data.studentID,\n                    firstName: response.data.firstName,\n                    lastName: response.data.lastName,\n                    nSemestersInProgram: response.nSemestersInProgram,\n                    email: response.data.email,\n                    departmentID: response.data.departmentID,\n                    entrySemester: response.data.entrySemester,\n                    entryYear: response.data.entryYear\n\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n   }\n\n\n\n    render() {\n\n        // Function that will set different values to state variable based on department selected\n        const changeDepartmentOptionHandler = (event) => { \n            this.setState({department: event.target.value}); \n        }; \n        const changeFirstNameHandler = (event) => { \n            this.setState({firstName: event.target.value}); \n        }; \n        const changeLastNameHandler = (event) => { \n            this.setState({lastName: event.target.value}); \n        }; \n        const changeSBUIDHandler = (event) => { \n            this.setState({id: event.target.value}); \n        }; \n        const changeEmailHandler = (event) => { \n            this.setState({email: event.target.value}); \n        }; \n        const changeTrackOptionHandler = (event) => { \n            this.setState({track: event.target.value}); \n        }; \n        const changeEntrySemesterOptionHandler = (event) => { \n            this.setState({entrySemester: event.target.value}); \n        }; \n        const changeEntryYearOptionHandler = (event) => { \n            this.setState({entryYear: event.target.value}); \n        }; \n\n\n        // Different arrays for different dropdowns \n        const ams = [ \"Computational Applied Mathematics\", \"Computational Biology\", \n            \"Operations Research\", \"Statistics\", \"Quantitative Finance\"]; \n        const bmi = [\"Clinical Informatics\", \"Imaging Informatics\", \"Translational Bioinformatics\"]; \n        const ese = [\"None\"]; \n        const cse = [\"None\"]; \n        \n        // Type variable to store different array for different dropdown\n        let type = null; \n        \n        //This will be used to create set of options that user will see\n        let options = null; \n        \n        // Setting Type variable according to dropdown\n        if (this.state.department === \"AMS\") { \n            type = ams; \n        } else if (this.state.department === \"BMI\") { \n            type =bmi; \n        } else if (this.state.department === \"ESE\") { \n            type = ese; \n        } else if (this.state.department === \"CSE\") { \n            type = cse; \n        } \n        \n        // If \"Type\" is null or undefined then options will be null, otherwise it will create a options iterable based on our array \n        if (type) { \n            options = type.map((el) => <option key={el}>{el}</option>); \n        } \n\n        return (\n            <div>\n                {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} addStudent={this.addStudent.bind(this)}/> : null}\n                <div id=\"addStudentForm\">\n                    <h2 id=\"addStudentFormHeader\">Student Information</h2>\n                    <div>\n                        <div className=\"addStudent_prompt\">First Name:</div>\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeFirstNameHandler}/>\n                        <div className=\"addStudent_prompt\">Last Name:</div>\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeLastNameHandler}/>\n                        <div className=\"addStudent_prompt\">SBU ID:</div>\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeSBUIDHandler}/>\n                        <div className=\"addStudent_prompt\">Email:</div>\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeEmailHandler}/>\n\n                        <div className=\"addStudent_prompt\">Department:</div>\n                        <select id=\"departmentSelect\" className=\"dropdownSelect\" onChange={changeDepartmentOptionHandler}>\n                            <option value=\"AMS\">AMS</option>\n                            <option value=\"BMI\">BMI</option>\n                            <option value=\"ESE\">ESE</option>\n                            <option value=\"CSE\">CSE</option>\n                        </select>\n                        <div className=\"addStudent_prompt\">Track:</div>\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeTrackOptionHandler}>\n                            {options}\n                        </select>\n\n                        <div className=\"addStudent_prompt\">Entry Semester:</div>\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeEntrySemesterOptionHandler}>\n                            <option value=\"Fall\">Fall</option>\n                            <option value=\"Winter\">Winter</option>\n                            <option value=\"Spring\">Spring</option>\n                            <option value=\"Summer\">Summer1</option>\n                            <option value=\"Summer\">Summer2</option>\n                        </select>\n                    </div>\n                        <div className=\"addStudent_prompt\">Entry Year:</div>\n                        <select id=\"entryYearSelect\" className=\"dropdownSelect\" onChange={changeEntryYearOptionHandler}>\n                            <option value=\"2021\">2021</option>\n                            <option value=\"2020\">2020</option>\n                            <option value=\"2019\">2019</option>\n                            <option value=\"2018\">2018</option>\n                            <option value=\"2017\">2017</option>\n                            <option value=\"2016\">2016</option>\n                            <option value=\"2015\">2015</option>\n                            <option value=\"2014\">2014</option>\n                            <option value=\"2013\">2013</option>\n                            <option value=\"2012\">2012</option>\n                            <option value=\"2011\">2011</option>\n                            <option value=\"2010\">2010</option>\n                            <option value=\"2009\">2009</option>\n                            <option value=\"2008\">2008</option>\n                            <option value=\"2007\">2007</option>\n                            <option value=\"2006\">2006</option>\n                            <option value=\"2005\">2005</option>\n                            <option value=\"2004\">2004</option>\n                            <option value=\"2003\">2003</option>\n                            <option value=\"2002\">2002</option>\n                            <option value=\"2001\">2001</option>\n                            <option value=\"2000\">2000</option>\n                            <option value=\"1999\">1999</option>\n                            <option value=\"1998\">1998</option>\n                            <option value=\"1997\">1997</option>\n                            <option value=\"1996\">1996</option>\n                            <option value=\"1995\">1995</option>\n                            <option value=\"1994\">1994</option>\n                            <option value=\"1993\">1993</option>\n                            <option value=\"1992\">1992</option>\n                            <option value=\"1991\">1991</option>\n                            <option value=\"1990\">1990</option>\n                        </select>\n                        <br></br><br></br>\n                        <button id=\"addStudentForm_submit_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"addStudent\")}>Add Student</button>\n                        <button id=\"addStudentForm_cancel_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"cancelAddStudent\")}>Cancel</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddStudentScreen;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nclass LoggedInLinks extends React.Component {\n  render() {\n    return (\n      <div className=\"right\">\n          <NavLink to=\"/\"><button id=\"homeButton\" className=\"navBarButtons\">Home</button></NavLink>\n          <NavLink to=\"/\"><button id=\"logOutButton\" className=\"navBarButtons\">Log Out</button></NavLink>\n      </div>\n    );\n  };\n}\n\nexport default LoggedInLinks;","import React from 'react';\nimport LoggedInLinks from './LoggedInLinks';\n\nclass Navbar extends React.Component {\n  \n  render() {\n    const links = <LoggedInLinks />;\n\n    return (\n      <nav id=\"navbar\" className=\"banner\">\n        <div className=\"container\">\n          <b id=\"logo\">MAST</b>\n          {links}\n        </div>\n      </nav>\n    );\n  };\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n//Import Components\nimport LoginScreen from './components/login_screen/LoginScreen.js';\nimport GPDHomeScreen from './components/home_screen/GPDHomeScreen.js';\nimport AddStudentScreen from './components/add_student/AddStudentScreen.js';\nimport Navbar from './components/navbar/Navbar.js';\n\nclass App extends Component{\n  render() {\n    return (\n          <BrowserRouter>\n            <div className=\"App\">\n            <Navbar />\n              <Switch>\n                <Route path=\"/login\" component={LoginScreen} />\n                <Route exact path=\"/\" component={GPDHomeScreen} />\n                <Route exact path=\"/addStudent\" component={AddStudentScreen} />\n              </Switch>\n            </div>\n          </BrowserRouter>\n    );\n  }\n}\nexport  default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\n\nimport './css/style.css'\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}