{"version":3,"sources":["components/login_screen/LoginScreen.js","components/modal/ModalWindow.js","http-common.js","services/student.service.js","components/home_screen/GPDHomeScreen.js","components/add_student/AddStudentScreen.js","components/navbar/LoggedInLinks.js","components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","state","email","password","handleChange","e","target","setState","id","value","handleSubmit","preventDefault","className","onSubmit","this","htmlFor","type","Component","papaparseOptions","header","dynamicTyping","skipEmptyLines","ModalWindow","props","handleImportCourseOfferingsFile","data","fileInfo","courseOfferings","handleImportStudentDataFile","studentData","handleImportStudentDataCoursePlansFile","studentDataCoursePlans","handleImportGradesFile","grades","isRedirectToHome","degreeRequirements","courseInformation","handleImportDegreeRequirementsFile","bind","handleImportCourseInformationFile","handleImportDegreeRequirements","handleImportCourseInformation","handleImportCourseOfferings","handleImportStudentData","handleImportStudentDataCoursePlans","handleImportGrades","modalContents","modalType","to","onClick","hideModalDialogPopUp","modal","label","onFileLoaded","parserOptions","addStudent","deleteAllStudents","React","axios","create","baseURL","headers","http","post","delete","GPDHomeScreen","showModalDialogPopUp","showModalDialogPopup","StudentService","deleteAll","then","response","console","log","catch","class","href","pathname","AddStudentScreen","department","firstName","lastName","track","entrySemester","entryYear","studentID","nSemestersInProgram","options","map","el","onChange","event","LoggedInLinks","Navbar","links","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a5f7e79.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LoginScreen extends Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  handleChange = (e) => {\n    const { target } = e;//shorthand for const target = e.target\n\n    this.setState(state => ({\n      ...state,\n      [target.id]: target.value,\n    }));\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div id=\"loginScreen\">\n        <div id=\"loginBanner\" className=\"banner\">\n            MAST  |  Master's Student Tracking<br />\n        </div>\n        <div id=\"loginBox\">\n        <div className=\"row\">\n          <form onSubmit={this.handleSubmit} className=\"col s4 white\">\n          <b id=\"loginTextHeading\">MAST</b>\n            <h5 className=\"loginBoxText\">Login</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"email\" className=\"loginBoxText\">Email: </label>\n              <input className=\"active\" className=\"loginInput\" type=\"email\" name=\"email\" id=\"email\" onChange={this.handleChange} />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"password\" className=\"loginBoxText\">Password: </label>\n              <input className=\"active\"  className=\"loginInput\" type=\"password\" name=\"password\" id=\"password\" onChange={this.handleChange} />\n            </div>\n            <div className=\"input-field\">\n              <button type=\"submit\" id=\"loginButton\">Login</button>\n            </div>\n          </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default  LoginScreen;","import React from 'react';    \nimport { Link } from 'react-router-dom';\nimport CSVReader from \"react-csv-reader\";\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n};\n\nclass ModalWindow extends React.Component {  \n    constructor(props){\n        super(props)\n        this.state = {\n            isRedirectToHome: this.props.isRedirectToHome,\n            /* These state objects will hold the parsed info from files to be uploaded upon pressing import button */\n            degreeRequirements: \"none\",\n            courseInformation: \"none\",\n            courseOfferings: \"none\",\n            studentData: \"none\",\n            studentDataCoursePlans: \"none\",\n            grades: \"none\"\n        }\n        this.handleImportDegreeRequirementsFile = this.handleImportDegreeRequirementsFile.bind(this);\n        this.handleImportCourseInformationFile = this.handleImportCourseInformationFile.bind(this);\n        this.handleImportCourseOfferingsFile = this.handleImportCourseOfferingsFile.bind(this);  \n        this.handleImportStudentDataFile = this.handleImportStudentDataFile.bind(this);\n        this.handleImportStudentDataCoursePlansFile = this.handleImportStudentDataCoursePlansFile.bind(this);\n        this.handleImportGradesFile = this.handleImportGradesFile.bind(this);\n        this.handleImportDegreeRequirements = this.handleImportDegreeRequirements.bind(this);\n        this.handleImportCourseInformation = this.handleImportCourseInformation.bind(this);\n        this.handleImportCourseOfferings = this.handleImportCourseOfferings.bind(this);  \n        this.handleImportStudentData = this.handleImportStudentData.bind(this);\n        this.handleImportStudentDataCoursePlans = this.handleImportStudentDataCoursePlans.bind(this);\n        this.handleImportGrades = this.handleImportGrades.bind(this);\n    }\n\n    /* Following functions handle data from files */\n    handleImportDegreeRequirementsFile(){\n        \n    }\n\n    handleImportCourseInformationFile(){\n        \n    }\n\n    handleImportCourseOfferingsFile = function(data, fileInfo) {\n        this.setState({courseOfferings: data});\n    }\n\n    handleImportStudentDataFile = function(data, fileInfo) {\n        this.setState({studentData: data});\n    }\n\n    handleImportStudentDataCoursePlansFile = function(data, fileInfo) {\n        this.setState({studentDataCoursePlans: data});\n    }\n\n    handleImportGradesFile = function(data, fileInfo) {\n        this.setState({grades: data});\n    }\n    \n\n    /* Following functions upload data to the database */\n    handleImportDegreeRequirements(){\n    \n    }\n\n    handleImportCourseInformation(){\n        \n    }\n\n    handleImportCourseOfferings(){\n\n    }\n\n    handleImportStudentData(){\n\n    }\n\n    handleImportStudentDataCoursePlans() {\n\n    }\n\n    handleImportGrades() {\n\n    }\n\n    render() {\n \n        // Type variable to store modal to display\n        let modalContents = null; \n\n        if(this.props.modalType === \"importDegreeRequirements\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    Add file import for pdf\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportDegreeRequirements, this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importCourseInformation\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    Add file import for XML/JSON\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportCourseInformation, this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importCourseOfferings\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose file to import: \"\n                        onFileLoaded={this.handleImportCourseOfferingsFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.handleImportCourseOfferings, this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importStudentData\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose student profile file to import: \"\n                        onFileLoaded={this.handleImportStudentDataFile}\n                        parserOptions={papaparseOptions}/>\n                    <CSVReader\n                        label=\"Choose student course plan file to import: \"\n                        onFileLoaded={this.handleImportStudentDataCoursePlansFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportStudentData, this.handleImportStudentDataCoursePlans, this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"importGrades\"){\n            modalContents =\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\n                <p id=\"modalDialogMessage\">\n                    <br></br><br></br>\n                    <CSVReader\n                        label=\"Choose file to import: \"\n                        onFileLoaded={this.handleImportGradesFile}\n                        parserOptions={papaparseOptions}/>\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportGrades, this.props.hideModalDialogPopUp} >Import</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"addStudent\"){\n            modalContents =\n            <div className=\"modal\" id=\"addStudent\" header=\"Add\" >\n                <p id=\"modalDialogMessage\">\n                Do you want to add this student?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.addStudent} >Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >No</button>    \n            </div>;\n        }\n        else if(this.props.modalType === \"cancelAddStudent\"){\n            modalContents =\n            <div className=\"modal\" id=\"cancelAddStudent\" header=\"Cancel\"  >\n                <p id=\"modalDialogMessage\">\n                Cancel adding student?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.hideModalDialogPopUp}>Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \n            </div>\n        }\n        else if(this.props.modalType === \"deleteAllStudents\"){\n            modalContents =\n            <div className=\"modal\" id=\"deleteAllStudents\" header=\"Cancel\"  >\n                <p id=\"modalDialogMessage\">\n                Delete all students?\n                <br></br><br></br></p>\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.deleteAllStudents}>Yes</button></Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \n            </div>\n        }\n        return (  \n        <div>\n            <div id = \"modal_background\">\n                    {modalContents}\n            </div>\n        </div>\n        );  \n    }  \n}  \nexport default ModalWindow;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:8080\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","import http from \"../http-common\";\n\nclass StudentService {\n    create(data) {\n        return http.post(\"/addStudent\", data);\n    }\n\n    deleteAll() {\n        return http.delete(`/`);\n    }\n}\n\nexport default new StudentService();","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport ModalDialog from '../modal/ModalWindow'\nimport StudentService from \"../../services/student.service\";\n\nclass GPDHomeScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            showModalDialogPopup: false,\n            modalType: \"none\"\n        }    \n    }\n\n      //Displays or Hides the Modal Dialog PopUp \n    showModalDialogPopUp = (type) => {\n        this.setState({modalType: type, showModalDialogPopup: true});\n    }\n\n    hideModalDialogPopUp = () => {\n        this.setState({showModalDialogPopup: false});\n    }\n\n    deleteAllStudents() {\n        StudentService.deleteAll()\n        .then(response => {\n            console.log(response.data);\n            this.setState({showModalDialogPopup: false});\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                 {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} deleteAllStudents={this.deleteAllStudents.bind(this)}/> : null} \n                <div id=\"GPDHomepageScreen\">\n                <div class=\"dropdown\">\n                    <button class=\"dropbtn\">Import</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importDegreeRequirements\")}>Degree Requirements</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseInformation\")}>Course Information</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseOfferings\")}>Course Offerings</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importStudentData\")}>Student Data</a>\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importGrades\")}>Grades</a>\n                    </div>\n                    </div>\n                        <a href='/addStudent'><Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link></a>\n                        <button className=\"GPDHomepageButton\" onClick={() => this.showModalDialogPopUp(\"deleteAllStudents\")}> Delete All Student Data</button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n//<Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link>\nexport default GPDHomeScreen;\n","import React, { Component } from 'react';\nimport ModalDialog from '../modal/ModalWindow'\nimport StudentService from \"../../services/student.service\";\n\nclass AddStudentScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            isRedirectToHome: true,\n            department: \"AMS\",         \n            showModalDialogPopup: false,\n            modalType: \"none\",\n            firstName: \"\",\n            lastName: \"\",\n            id: \"\",\n            email: \"\",\n            track : \"\",\n            entrySemester: \"\",\n            entryYear: \"\"\n        }    \n    }\n\n      //Displays or Hides the Modal Dialog PopUp \n    showModalDialogPopUp = (type) => {\n        this.setState({modalType: type, showModalDialogPopup: true});\n    }\n\n    hideModalDialogPopUp = () => {\n        this.setState({showModalDialogPopup: false});\n    }\n\n    addStudent() {\n        var data = {\n            studentID: this.state.id,\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            nSemestersInProgram: 0\n        };\n\n        StudentService.create(data)\n            .then(response => {\n                this.setState({\n                    studentID: response.data.studentID,\n                    firstName: response.data.firstName,\n                    lastName: response.data.lastName,\n                    nSemestersInProgram: response.nSemestersInProgram\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n        //this.setState({showModalDialogPopup: false});\n   }\n\n\n\n    render() {\n\n        // Function that will set different values to state variable based on department selected\n        const changeDepartmentOptionHandler = (event) => { \n            this.setState({department: event.target.value}); \n        }; \n        const changeFirstNameHandler = (event) => { \n            this.setState({firstName: event.target.value}); \n        }; \n        const changeLastNameHandler = (event) => { \n            this.setState({lastName: event.target.value}); \n        }; \n        const changeSBUIDHandler = (event) => { \n            this.setState({id: event.target.value}); \n        }; \n        const changeEmailHandler = (event) => { \n            this.setState({email: event.target.value}); \n        }; \n        const changeTrackOptionHandler = (event) => { \n            this.setState({track: event.target.value}); \n        }; \n        const changeEntrySemesterOptionHandler = (event) => { \n            this.setState({entrySemester: event.target.value}); \n        }; \n        const changeEntryYearOptionHandler = (event) => { \n            this.setState({entryYear: event.target.value}); \n        }; \n\n\n        // Different arrays for different dropdowns \n        const ams = [ \"Computational Applied Mathematics\", \"Computational Biology\", \n            \"Operations Research\", \"Statistics\", \"Quantitative Finance\"]; \n        const bmi = [\"Clinical Informatics\", \"Imaging Informatics\", \"Translational Bioinformatics\"]; \n        const ese = [\"None\"]; \n        const cse = [\"None\"]; \n        \n        // Type variable to store different array for different dropdown\n        let type = null; \n        \n        //This will be used to create set of options that user will see\n        let options = null; \n        \n        // Setting Type variable according to dropdown\n        if (this.state.department === \"AMS\") { \n            type = ams; \n        } else if (this.state.department === \"BMI\") { \n            type =bmi; \n        } else if (this.state.department === \"ESE\") { \n            type = ese; \n        } else if (this.state.department === \"CSE\") { \n            type = cse; \n        } \n        \n        // If \"Type\" is null or undefined then options will be null, otherwise it will create a options iterable based on our array \n        if (type) { \n            options = type.map((el) => <option key={el}>{el}</option>); \n        } \n\n        return (\n            <div>\n                {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} addStudent={this.addStudent.bind(this)}/> : null}\n                <div id=\"addStudentForm\">\n                    <h2 id=\"addStudentFormHeader\">Student Information</h2>\n                    <div>\n                        <div className=\"addStudent_prompt\">First Name:</div>\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeFirstNameHandler}/>\n                        <div className=\"addStudent_prompt\">Last Name:</div>\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeLastNameHandler}/>\n                        <div className=\"addStudent_prompt\">SBU ID:</div>\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeSBUIDHandler}/>\n                        <div className=\"addStudent_prompt\">Email:</div>\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeEmailHandler}/>\n\n                        <div className=\"addStudent_prompt\">Department:</div>\n                        <select id=\"departmentSelect\" className=\"dropdownSelect\" onChange={changeDepartmentOptionHandler}>\n                            <option value=\"AMS\">AMS</option>\n                            <option value=\"BMI\">BMI</option>\n                            <option value=\"ESE\">ESE</option>\n                            <option value=\"CSE\">CSE</option>\n                        </select>\n                        <div className=\"addStudent_prompt\">Track:</div>\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeTrackOptionHandler}>\n                            {options}\n                        </select>\n\n                        <div className=\"addStudent_prompt\">Entry Semester:</div>\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeEntrySemesterOptionHandler}>\n                            <option value=\"Fall\">Fall</option>\n                            <option value=\"Winter\">Winter</option>\n                            <option value=\"Spring\">Spring</option>\n                            <option value=\"Summer\">Summer</option>\n                        </select>\n                    </div>\n                        <div className=\"addStudent_prompt\">Entry Year:</div>\n                        <select id=\"entryYearSelect\" className=\"dropdownSelect\" onChange={changeEntryYearOptionHandler}>\n                            <option value=\"2021\">2021</option>\n                            <option value=\"2020\">2020</option>\n                            <option value=\"2019\">2019</option>\n                            <option value=\"2018\">2018</option>\n                            <option value=\"2017\">2017</option>\n                            <option value=\"2016\">2016</option>\n                            <option value=\"2015\">2015</option>\n                            <option value=\"2014\">2014</option>\n                            <option value=\"2013\">2013</option>\n                            <option value=\"2012\">2012</option>\n                            <option value=\"2011\">2011</option>\n                            <option value=\"2010\">2010</option>\n                            <option value=\"2009\">2009</option>\n                            <option value=\"2008\">2008</option>\n                            <option value=\"2007\">2007</option>\n                            <option value=\"2006\">2006</option>\n                            <option value=\"2005\">2005</option>\n                            <option value=\"2004\">2004</option>\n                            <option value=\"2003\">2003</option>\n                            <option value=\"2002\">2002</option>\n                            <option value=\"2001\">2001</option>\n                            <option value=\"2000\">2000</option>\n                            <option value=\"1999\">1999</option>\n                            <option value=\"1998\">1998</option>\n                            <option value=\"1997\">1997</option>\n                            <option value=\"1996\">1996</option>\n                            <option value=\"1995\">1995</option>\n                            <option value=\"1994\">1994</option>\n                            <option value=\"1993\">1993</option>\n                            <option value=\"1992\">1992</option>\n                            <option value=\"1991\">1991</option>\n                            <option value=\"1990\">1990</option>\n                        </select>\n                        <br></br><br></br>\n                        <button id=\"addStudentForm_submit_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"addStudent\")}>Add Student</button>\n                        <button id=\"addStudentForm_cancel_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"cancelAddStudent\")}>Cancel</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddStudentScreen;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nclass LoggedInLinks extends React.Component {\n  render() {\n    return (\n      <div className=\"right\">\n          <NavLink to=\"/\"><button id=\"homeButton\" className=\"navBarButtons\">Home</button></NavLink>\n          <NavLink to=\"/\"><button id=\"logOutButton\" className=\"navBarButtons\">Log Out</button></NavLink>\n      </div>\n    );\n  };\n}\n\nexport default LoggedInLinks;","import React from 'react';\nimport LoggedInLinks from './LoggedInLinks';\n\nclass Navbar extends React.Component {\n  \n  render() {\n    const links = <LoggedInLinks />;\n\n    return (\n      <nav id=\"navbar\" className=\"banner\">\n        <div className=\"container\">\n          <b id=\"logo\">MAST</b>\n          {links}\n        </div>\n      </nav>\n    );\n  };\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n//Import Components\nimport LoginScreen from './components/login_screen/LoginScreen.js';\nimport GPDHomeScreen from './components/home_screen/GPDHomeScreen.js';\nimport AddStudentScreen from './components/add_student/AddStudentScreen.js';\nimport Navbar from './components/navbar/Navbar.js';\n\nclass App extends Component{\n  render() {\n    return (\n          <BrowserRouter>\n            <div className=\"App\">\n            <Navbar />\n              <Switch>\n                <Route path=\"/login\" component={LoginScreen} />\n                <Route exact path=\"/\" component={GPDHomeScreen} />\n                <Route exact path=\"/addStudent\" component={AddStudentScreen} />\n              </Switch>\n            </div>\n          </BrowserRouter>\n    );\n  }\n}\nexport  default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\n\nimport './css/style.css'\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}