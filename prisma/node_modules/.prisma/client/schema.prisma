generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  areaID            Int
  requirementID     Int
  name              String?           @db.VarChar(45)
  DegreeRequirement DegreeRequirement @relation(fields: [requirementID], references: [requirementID])
  AreaRequirement   AreaRequirement?
  ElectiveStatus    ElectiveStatus[]
  SubArea           SubArea?

  @@id([areaID, requirementID])
  @@index([requirementID], name: "AreaRequirementID_idx")
}

model AreaRequirement {
  areaID    Int  @id
  nSubAreas Int?
  nCourses  Int?
  nCredits  Int?
  Area      Area @relation(fields: [areaID], references: [areaID])
}

model Comments {
  studentID Int
  GPDID     Int
  comment   String    @db.VarChar(200)
  date      DateTime? @db.Date
  GPD       GPD       @relation(fields: [GPDID], references: [GPDID])
  Student   Student   @relation(fields: [studentID], references: [studentID])

  @@id([studentID, GPDID, comment])
  @@index([GPDID], name: "CommentsGPDID_idx")
}

model Course {
  courseID                                         String                   @id @db.VarChar(6)
  departID                                         String?                  @db.VarChar(3)
  name                                             String?                  @db.VarChar(45)
  description                                      String?                  @db.VarChar(100)
  credits                                          Int?
  courseNum                                        Int?
  Department                                       Department?              @relation(fields: [departID], references: [departmentID])
  CourseOffering                                   CourseOffering[]
  prerequisite_CourseToprerequisite_courseID       prerequisite[]           @relation("CourseToprerequisite_courseID")
  prerequisite_CourseToprerequisite_prerequisiteID prerequisite[]           @relation("CourseToprerequisite_prerequisiteID")
  proficiencyRequirement                           proficiencyRequirement[]
  requiredCourse                                   requiredCourse[]
  RequiredStatus                                   RequiredStatus[]

  @@index([departID], name: "courseDepID_idx")
}

model CourseOffering {
  courseOfferingID String                   @id @db.VarChar(45)
  courseID         String?                  @db.VarChar(6)
  semester         CourseOffering_semester?
  year             Int?
  section          String?                  @db.VarChar(45)
  Course           Course?                  @relation(fields: [courseID], references: [courseID])
  TimeSlotDay      TimeSlotDay[]
  TimeSlotTime     TimeSlotTime?

  @@index([courseID], name: "CourseOfferingCourseID_idx")
}

model CoursePlan {
  studentID Int      @id
  valid     Boolean?
  complete  Boolean? @default(false)
  Student   Student  @relation(fields: [studentID], references: [studentID])
}

model DegreeRequirement {
  requirementID          Int                                @id
  departID               String?                            @db.VarChar(3)
  track                  String?                            @db.VarChar(45)
  versionSemester        DegreeRequirement_versionSemester?
  versionYear            Int?
  totalCredit            Int?
  project                String?                            @db.VarChar(45)
  thesis                 String?                            @db.VarChar(45)
  timeLimit              Int?
  finalRecommended       Int?                               @db.TinyInt
  minGPA                 Int?
  Department             Department?                        @relation(fields: [departID], references: [departmentID])
  Area                   Area[]
  proficiencyRequirement proficiencyRequirement[]
  requiredCourse         requiredCourse[]

  @@index([departID], name: "DegreeRequirementDepartmentID_idx")
}

model Department {
  departmentID      String              @id @db.VarChar(3)
  departmentName    String?             @db.VarChar(45)
  Course            Course[]
  DegreeRequirement DegreeRequirement[]
  GPD               GPD?
}

model ElectiveStatus {
  studentID Int
  areaID    Int
  status    ElectiveStatus_status? @default(Unsatisfied)
  Area      Area                   @relation(fields: [areaID], references: [areaID])
  Student   Student                @relation(fields: [studentID], references: [studentID])

  @@id([studentID, areaID])
  @@index([areaID], name: "areaID_idx")
}

model GPD {
  GPDID        Int        @unique
  departmentID String     @unique @db.VarChar(3)
  User         User       @relation(fields: [GPDID], references: [userID])
  Department   Department @relation(fields: [departmentID], references: [departmentID])
  Comments     Comments[]
}

model Grades {
  studentID        Int
  courseOfferingID String  @db.VarChar(45)
  grade            String? @db.VarChar(2)
  Student          Student @relation(fields: [studentID], references: [studentID])

  @@id([studentID, courseOfferingID])
}

model prerequisite {
  courseID                                   String @db.VarChar(6)
  prerequisiteID                             String @db.VarChar(6)
  Course_CourseToprerequisite_courseID       Course @relation("CourseToprerequisite_courseID", fields: [courseID], references: [courseID])
  Course_CourseToprerequisite_prerequisiteID Course @relation("CourseToprerequisite_prerequisiteID", fields: [prerequisiteID], references: [courseID])

  @@id([courseID, prerequisiteID])
  @@index([prerequisiteID], name: "PprereqID_idx")
}

model proficiencyRequirement {
  requirementID     Int
  courseID          String            @db.VarChar(6)
  Course            Course            @relation(fields: [courseID], references: [courseID])
  DegreeRequirement DegreeRequirement @relation(fields: [requirementID], references: [requirementID])

  @@id([requirementID, courseID])
  @@index([courseID], name: "PRcourseID_idx")
}

model requiredCourse {
  requirementID     Int
  courseID          String            @db.VarChar(6)
  Course            Course            @relation(fields: [courseID], references: [courseID])
  DegreeRequirement DegreeRequirement @relation(fields: [requirementID], references: [requirementID])

  @@id([requirementID, courseID])
  @@index([courseID], name: "RCcourseID_idx")
}

model RequiredStatus {
  studentID Int
  courseID  String                 @db.VarChar(6)
  status    RequiredStatus_status? @default(Unsatisfied)
  Course    Course                 @relation(fields: [courseID], references: [courseID])
  Student   Student                @relation(fields: [studentID], references: [studentID])

  @@id([studentID, courseID])
  @@index([courseID], name: "RScourseID_idx")
}

model Student {
  studentID           Int                   @id @default(0)
  firstName           String                @db.VarChar(45)
  lastName            String                @db.VarChar(45)
  requirementID       Int?
  entrySemester       Student_entrySemester
  entryYear           Int
  gradSemester        Student_gradSemester?
  gradYear            Int?
  nSemestersInProgram Int
  gpa                 Decimal?              @db.Decimal(3, 2)
  totalCredits        Int?
  projectOption       String?               @db.VarChar(45)
  advisor             String?               @db.VarChar(45)
  hasGraduated        Boolean?
  Comments            Comments[]
  CoursePlan          CoursePlan?
  ElectiveStatus      ElectiveStatus[]
  Grades              Grades[]
  RequiredStatus      RequiredStatus[]
}

model SubArea {
  areaID     Int     @id
  minCourses Int?
  minCredit  Int?
  maxCredit  Int?
  maxCourse  Int?
  name       String? @db.VarChar(45)
  Area       Area    @relation(fields: [areaID], references: [areaID])
}

model TimeSlotDay {
  CourseOfferingID String          @db.VarChar(45)
  day              TimeSlotDay_day
  CourseOffering   CourseOffering  @relation(fields: [CourseOfferingID], references: [courseOfferingID])

  @@id([CourseOfferingID, day])
}

model TimeSlotTime {
  courseOfferingID String         @id @db.VarChar(45)
  startTime        DateTime?      @db.Time(0)
  endTime          DateTime?      @db.Time(0)
  CourseOffering   CourseOffering @relation(fields: [courseOfferingID], references: [courseOfferingID])
}

model User {
  userID   Int    @id @default(0)
  username String @db.VarChar(45)
  password String @db.VarChar(45)
  GPD      GPD?
}

enum CourseOffering_semester {
  Fall
  Winter
  Spring
  Summer1
  Summer2
}

enum DegreeRequirement_versionSemester {
  Fall
  Winter
  Spring
  SummerI
  SummerII
}

enum ElectiveStatus_status {
  Satisfied
  Pending
  Unsatisfied
}

enum RequiredStatus_status {
  Satisfied
  Pending
  Unsatisfied
}

enum Student_entrySemester {
  Fall
  Winter
  Spring
  Summer1
  Summer2
}

enum Student_gradSemester {
  Fall
  Winter
  Spring
  Summer1
  Summer2
}

enum TimeSlotDay_day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
