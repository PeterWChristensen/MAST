{"version":3,"sources":["components/login_screen/LoginScreen.js","http-common.js","services/courseOfferings.service.js","services/importGrade.service.js","services/student.service.js","components/modal/ModalWindow.js","services/coursePlan.service.js","components/home_screen/GPDHomeScreen.js","components/add_student/AddStudentScreen.js","components/navbar/LoggedInLinks.js","components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","state","email","password","handleChange","e","target","setState","id","value","handleSubmit","preventDefault","className","onSubmit","this","htmlFor","type","Component","axios","create","baseURL","headers","data","http","post","get","put","delete","papaparseOptions","header","dynamicTyping","skipEmptyLines","ModalWindow","props","handleImportCourseOfferingsFile","fileInfo","courseOfferings","handleImportStudentDataFile","studentData","handleImportStudentDataCoursePlansFile","studentDataCoursePlans","handleImportGradesFile","grades","degreeRequirements","courseInformation","handleImportDegreeRequirementsFile","bind","handleImportCourseInformationFile","handleImportDegreeRequirements","handleImportCourseInformation","handleImportCourseOfferings","handleImportStudentData","handleImportGrades","forEach","offering","timeslotSplit","timeslot","split","timeSplit","dayString","startTimeString","endTimeString","offeringCourseID","department","course_num","courseOfferingID","semester","year","section","courseID","day","startTime","endTime","CourseOfferingsService","then","response","console","log","catch","hideModalDialogPopUp","i","length","data_temp","studentID","sbu_id","firstName","first_name","lastName","last_name","track","entrySemester","entry_semester","entryYear","entry_year","requirementVersionSemester","requirement_version_semester","requirementVersionYear","requirement_version_year","graduationSemester","graduation_semester","graduationYear","graduation_year","StudentService","plan","data_plan","grade","GradeService","info","courseOfferingIDNum","modalContents","modalType","to","onClick","modal","label","onFileLoaded","parserOptions","addStudent","deleteAllStudents","React","GPDHomeScreen","showModalDialogPopUp","showModalDialogPopup","deleteAll","class","href","pathname","AddStudentScreen","nSemestersInProgram","departmentID","options","map","el","onChange","event","LoggedInLinks","Navbar","links","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa821eb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass LoginScreen extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { target } = e;//shorthand for const target = e.target\r\n\r\n    this.setState(state => ({\r\n      ...state,\r\n      [target.id]: target.value,\r\n    }));\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"loginScreen\">\r\n        <div id=\"loginBanner\" className=\"banner\">\r\n            MAST  |  Master's Student Tracking<br />\r\n        </div>\r\n        <div id=\"loginBox\">\r\n        <div className=\"row\">\r\n          <form onSubmit={this.handleSubmit} className=\"col s4 white\">\r\n          <b id=\"loginTextHeading\">MAST</b>\r\n            <h5 className=\"loginBoxText\">Login</h5>\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"email\" className=\"loginBoxText\">Email: </label>\r\n              <input className=\"active\" className=\"loginInput\" type=\"email\" name=\"email\" id=\"email\" onChange={this.handleChange} />\r\n            </div>\r\n            <div className=\"input-field\">\r\n              <label htmlFor=\"password\" className=\"loginBoxText\">Password: </label>\r\n              <input className=\"active\"  className=\"loginInput\" type=\"password\" name=\"password\" id=\"password\" onChange={this.handleChange} />\r\n            </div>\r\n            <div className=\"input-field\">\r\n              <button type=\"submit\" id=\"loginButton\">Login</button>\r\n            </div>\r\n          </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  LoginScreen;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:8080\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});","import http from \"../http-common\";\r\n\r\nclass CourseOfferingsService {\r\n    create(data) {\r\n        return http.post(\"/\", data);\r\n    }\r\n}\r\n\r\nexport default new CourseOfferingsService();","import http from \"../http-common\";\r\n\r\nclass GradeService {\r\n  getAll() {\r\n    return http.get(\"/\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`//${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/${id}`, data);\r\n  }\r\n}\r\n\r\nexport default new GradeService();","import http from \"../http-common\";\r\n\r\nclass StudentService {\r\n    create(data) {\r\n        return http.post(\"/addStudent\", data);\r\n    }\r\n\r\n    deleteAll() {\r\n        return http.delete(`/`);\r\n    }\r\n}\r\n\r\nexport default new StudentService();","import React from 'react';    \r\nimport { Link } from 'react-router-dom';\r\nimport CSVReader from \"react-csv-reader\";\r\nimport CourseOfferingsService from \"../../services/courseOfferings.service\";\r\nimport GradeService from \"../../services/importGrade.service\";\r\nimport StudentService from \"../../services/student.service\";\r\nimport CoursePlanService from \"../../services/coursePlan.service\";\r\n\r\nconst papaparseOptions = {\r\n  header: true,\r\n  dynamicTyping: true,\r\n  skipEmptyLines: true,\r\n};\r\n\r\nclass ModalWindow extends React.Component {  \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            /* These state objects will hold the parsed info from files to be uploaded upon pressing import button */\r\n            degreeRequirements: \"none\",\r\n            courseInformation: \"none\",\r\n            courseOfferings: \"none\",\r\n            studentData: \"none\",\r\n            studentDataCoursePlans: \"none\",\r\n            grades: \"none\"\r\n        }\r\n        this.handleImportDegreeRequirementsFile = this.handleImportDegreeRequirementsFile.bind(this);\r\n        this.handleImportCourseInformationFile = this.handleImportCourseInformationFile.bind(this);\r\n        this.handleImportCourseOfferingsFile = this.handleImportCourseOfferingsFile.bind(this);  \r\n        this.handleImportStudentDataFile = this.handleImportStudentDataFile.bind(this);\r\n        this.handleImportStudentDataCoursePlansFile = this.handleImportStudentDataCoursePlansFile.bind(this);\r\n        this.handleImportGradesFile = this.handleImportGradesFile.bind(this);\r\n        this.handleImportDegreeRequirements = this.handleImportDegreeRequirements.bind(this);\r\n        this.handleImportCourseInformation = this.handleImportCourseInformation.bind(this);\r\n        this.handleImportCourseOfferings = this.handleImportCourseOfferings.bind(this);  \r\n        this.handleImportStudentData = this.handleImportStudentData.bind(this);\r\n        //this.handleImportStudentDataCoursePlans = this.handleImportStudentDataCoursePlans.bind(this);\r\n        this.handleImportGrades = this.handleImportGrades.bind(this);\r\n    }\r\n\r\n    /* Following functions handle data from files */\r\n    handleImportDegreeRequirementsFile(){\r\n        \r\n    }\r\n\r\n    handleImportCourseInformationFile(){\r\n        \r\n    }\r\n\r\n    handleImportCourseOfferingsFile = function(data, fileInfo) {\r\n        this.setState({courseOfferings: data});\r\n    }\r\n\r\n    handleImportStudentDataFile = function(data, fileInfo) {\r\n        this.setState({studentData: data});\r\n\r\n    }\r\n\r\n    handleImportStudentDataCoursePlansFile = function(data, fileInfo) {\r\n        this.setState({studentDataCoursePlans: data});\r\n\r\n    }\r\n\r\n    handleImportGradesFile = function(data, fileInfo) {\r\n        this.setState({grades: data});\r\n    }\r\n    \r\n\r\n    /* Following functions upload data to the database */\r\n    handleImportDegreeRequirements(){\r\n    \r\n    }\r\n\r\n    handleImportCourseInformation(){\r\n        \r\n    }\r\n\r\n    handleImportCourseOfferings(){\r\n        this.state.courseOfferings.forEach(function (offering) {\r\n\r\n            let timeslot = offering.timeslot;\r\n            let timeslotSplit = timeslot.split(' ');\r\n            let timeSplit = timeslotSplit[1].split('-');\r\n            let dayString = timeslotSplit[0];\r\n            let startTimeString = timeSplit[0];\r\n            let endTimeString = timeSplit[1];\r\n            \r\n            let offeringCourseID = offering.department + offering.course_num;\r\n            let courseOfferingIDNum = offeringCourseID + offering.semester + offering.year + offering.section;\r\n            var data = {\r\n                courseOfferingID: courseOfferingIDNum,\r\n                courseID: offeringCourseID,\r\n                semester: offering.semester,\r\n                year: offering.year,\r\n                section: offering.section,\r\n                day: dayString,\r\n                startTime: startTimeString,\r\n                endTime: endTimeString\r\n            };\r\n            CourseOfferingsService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    courseOfferingID: response.data.courseOfferingID,\r\n                    courseID: response.data.courseID,\r\n                    semester: response.data.semester,\r\n                    year: response.year,\r\n                    section: response.section, \r\n                    day: response.day,\r\n                    startTime: response.startTime,\r\n                    endTime: response.endTime\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        });\r\n        this.props.hideModalDialogPopUp();\r\n    }\r\n\r\n    handleImportStudentData(){\r\n        var data = this.state.studentData\r\n        var i\r\n        for (i = 0; i < data.length; i++) {\r\n            var data_temp = {\r\n                studentID: data[i].sbu_id,\r\n                firstName: data[i].first_name,\r\n                lastName: data[i].last_name,\r\n                email: data[i].email,\r\n                department: data[i].department,\r\n                track: data[i].track,\r\n                entrySemester: data[i].entry_semester,\r\n                entryYear: data[i].entry_year,\r\n                requirementVersionSemester: data[i].requirement_version_semester,\r\n                requirementVersionYear: data[i].requirement_version_year,\r\n                graduationSemester: data[i].graduation_semester,\r\n                graduationYear: data[i].graduation_year,\r\n                password: data[i].password\r\n            };\r\n            console.log(data_temp)\r\n            StudentService.create(data_temp)\r\n            .then(response => {\r\n                this.setState({\r\n                    studentID: response.data_temp.studentID,\r\n                    firstName: response.data_temp.firstName,\r\n                    lastName: response.data_temp.lastName,\r\n                    email: response.data_temp.email,\r\n                    department: response.data_temp.department,\r\n                    track: response.data_temp.track,\r\n                    entrySemester: response.data_temp.entrySemester,\r\n                    entryYear: response.data_temp.entryYear,\r\n                    requirementVersionSemester: response.data_temp.requirementVersionSemester,\r\n                    requirementVersionYear: response.data_temp.requirementVersionYear,\r\n                    graduationSemester: response.data_temp.graduationSemester,\r\n                    graduationYear: response.data_temp.graduationYear,\r\n                    password: response.data_temp.password\r\n                });\r\n                console.log(response.data_temp);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        }\r\n\r\n        var plan = this.state.studentDataCoursePlans\r\n        \r\n        var i\r\n        for (i = 0; i < plan.length; i++) {\r\n\r\n            let offeringCourseID = plan[i].department + plan[i].course_num;\r\n\r\n            var data_plan = {\r\n                studentID: plan[i].sbu_id,\r\n                courseOfferingID: offeringCourseID,\r\n                grade: plan[i].grade\r\n            };\r\n            console.log(data_plan.studentID)\r\n            console.log(data_plan.courseOfferingID)\r\n            console.log(data_plan.grade)\r\n            \r\n            GradeService.create(data_plan)\r\n            .then(response => {\r\n                this.setState({\r\n                    studentID: response.data_plan.studentID,\r\n                    courseOfferingID: response.data_plan.courseOfferingID,\r\n                    grade: response.data_plan.grade,\r\n                });\r\n                console.log(response.data_plan);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        }\r\n\r\n        this.props.hideModalDialogPopUp();\r\n    }\r\n\r\n    handleImportGrades() {\r\n        this.state.grades.forEach(function (info) {\r\n\r\n          \r\n            let offeringCourseID = info.department + info.course_num;\r\n            let courseOfferingIDNum = offeringCourseID + info.semester + info.year + info.section;\r\n            console.log(\"courseOfferingIDNum& studentID=\");\r\n            console.log(courseOfferingIDNum);\r\n            console.log(info.sbu_id);\r\n            console.log(info.grade);\r\n            var data = {\r\n                studentID: info.sbu_id,\r\n                courseOfferingID: courseOfferingIDNum,\r\n                grade: info.grade\r\n            };\r\n            console.log(\"Before create service\");            \r\n            GradeService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    studentID: response.data.studentID,\r\n                    courseOfferingID: response.data.courseOfferingID,\r\n                    grade: response.data.grade\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                console.log(\"Error create service\");\r\n            });\r\n    \r\n\r\n            //actually after this. I need to update courseOffering with all the new info such as section etc.\r\n        });\r\n\r\n        this.props.hideModalDialogPopUp();\r\n    }\r\n    render() {\r\n \r\n        // Type variable to store modal to display\r\n        let modalContents = null; \r\n\r\n        if(this.props.modalType === \"importDegreeRequirements\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\r\n                <p id=\"modalDialogMessage\">\r\n                    <br></br><br></br>\r\n                    Add file import for pdf\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportDegreeRequirements, this.props.hideModalDialogPopUp} >Import</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"importCourseInformation\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\r\n                <p id=\"modalDialogMessage\">\r\n                    <br></br><br></br>\r\n                    Add file import for XML/JSON\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportCourseInformation, this.props.hideModalDialogPopUp} >Import</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"importCourseOfferings\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\r\n                <p id=\"modalDialogMessage\">\r\n                    <br></br><br></br>\r\n                    <CSVReader\r\n                        label=\"Choose file to import: \"\r\n                        onFileLoaded={this.handleImportCourseOfferingsFile}\r\n                        parserOptions={papaparseOptions}/>\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportCourseOfferings} >Import</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"importStudentData\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\r\n                <p id=\"modalDialogMessage\">\r\n                    <br></br><br></br>\r\n                    <CSVReader\r\n                        label=\"Choose student profile file to import: \"\r\n                        onFileLoaded={this.handleImportStudentDataFile}\r\n                        parserOptions={papaparseOptions}/>\r\n                    <CSVReader\r\n                        label=\"Choose student course plan file to import: \"\r\n                        onFileLoaded={this.handleImportStudentDataCoursePlansFile}\r\n                        parserOptions={papaparseOptions}/>\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportStudentData} >Import</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"importGrades\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"import\" header=\"Import\" >\r\n                <p id=\"modalDialogMessage\">\r\n                    <br></br><br></br>\r\n                    <CSVReader\r\n                        label=\"Choose file to import: \"\r\n                        onFileLoaded={this.handleImportGradesFile}\r\n                        parserOptions={papaparseOptions}/>\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.handleImportGrades} >Import</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >Cancel</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"addStudent\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"addStudent\" header=\"Add\" >\r\n                <p id=\"modalDialogMessage\">\r\n                Do you want to add this student?\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.addStudent} >Yes</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp} >No</button>    \r\n            </div>;\r\n        }\r\n        else if(this.props.modalType === \"cancelAddStudent\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"cancelAddStudent\" header=\"Cancel\"  >\r\n                <p id=\"modalDialogMessage\">\r\n                Cancel adding student?\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.hideModalDialogPopUp}>Yes</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \r\n            </div>\r\n        }\r\n        else if(this.props.modalType === \"deleteAllStudents\"){\r\n            modalContents =\r\n            <div className=\"modal\" id=\"deleteAllStudents\" header=\"Cancel\"  >\r\n                <p id=\"modalDialogMessage\">\r\n                Delete all students?\r\n                <br></br><br></br></p>\r\n                <Link to=\"/\"><button className=\"modalButton\" onClick={this.props.deleteAllStudents}>Yes</button></Link>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button className=\"modalButton\" modal=\"close\" onClick={this.props.hideModalDialogPopUp}>No</button> \r\n            </div>\r\n        }\r\n        return (  \r\n        <div>\r\n            <div id = \"modal_background\">\r\n                    {modalContents}\r\n            </div>\r\n        </div>\r\n        );  \r\n    }  \r\n}  \r\nexport default ModalWindow;\r\n","import http from \"../http-common\";\r\n\r\nclass CoursePlanService {\r\n    create(data) {\r\n        return http.post(\"/\", data);\r\n    }\r\n}\r\n\r\nexport default new CoursePlanService();","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ModalDialog from '../modal/ModalWindow'\r\nimport StudentService from \"../../services/student.service\";\r\n\r\nclass GPDHomeScreen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            showModalDialogPopup: false,\r\n            modalType: \"none\"\r\n        }    \r\n    }\r\n\r\n      //Displays or Hides the Modal Dialog PopUp \r\n    showModalDialogPopUp = (type) => {\r\n        this.setState({modalType: type, showModalDialogPopup: true});\r\n    }\r\n\r\n    hideModalDialogPopUp = () => {\r\n        this.setState({showModalDialogPopup: false});\r\n    }\r\n\r\n    deleteAllStudents() {\r\n        StudentService.deleteAll()\r\n        .then(response => {\r\n            console.log(response.data);\r\n            this.setState({showModalDialogPopup: false});\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                 {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} deleteAllStudents={this.deleteAllStudents.bind(this)}/> : null} \r\n                <div id=\"GPDHomepageScreen\">\r\n                <div class=\"dropdown\">\r\n                    <button class=\"dropbtn\">Import</button>\r\n                    <div class=\"dropdown-content\">\r\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importDegreeRequirements\")}>Degree Requirements</a>\r\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseInformation\")}>Course Information</a>\r\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importCourseOfferings\")}>Course Offerings</a>\r\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importStudentData\")}>Student Data</a>\r\n                        <a href=\"#\" onClick={() => this.showModalDialogPopUp(\"importGrades\")}>Grades</a>\r\n                    </div>\r\n                    </div>\r\n                        <a href='/addStudent'><Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link></a>\r\n                        <button className=\"GPDHomepageButton\" onClick={() => this.showModalDialogPopUp(\"deleteAllStudents\")}> Delete All Student Data</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n//<Link to={{pathname: '/addStudent'}}><button className=\"GPDHomepageButton\">Add Student</button></Link>\r\nexport default GPDHomeScreen;\r\n","import React, { Component } from 'react';\r\nimport ModalDialog from '../modal/ModalWindow'\r\nimport StudentService from \"../../services/student.service\";\r\n\r\nclass AddStudentScreen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            department: \"AMS\",         \r\n            showModalDialogPopup: false,\r\n            modalType: \"none\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            id: \"\",\r\n            email: \"\",\r\n            track : \"\",\r\n            entrySemester: \"Fall\",\r\n            entryYear: \"2021\"\r\n        }    \r\n    }\r\n\r\n      //Displays or Hides the Modal Dialog PopUp \r\n    showModalDialogPopUp = (type) => {\r\n        this.setState({modalType: type, showModalDialogPopup: true});\r\n    }\r\n\r\n    hideModalDialogPopUp = () => {\r\n        this.setState({showModalDialogPopup: false});\r\n    }\r\n\r\n    addStudent() {\r\n        var data = {\r\n            studentID: this.state.id,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            nSemestersInProgram: 0,\r\n            email: this.state.email,\r\n            departmentID: this.state.department,\r\n            entrySemester: this.state.entrySemester,\r\n            entryYear: this.state.entryYear\r\n        };\r\n        console.log(data);\r\n        StudentService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    studentID: response.data.studentID,\r\n                    firstName: response.data.firstName,\r\n                    lastName: response.data.lastName,\r\n                    nSemestersInProgram: response.nSemestersInProgram,\r\n                    email: response.data.email,\r\n                    departmentID: response.data.departmentID,\r\n                    entrySemester: response.data.entrySemester,\r\n                    entryYear: response.data.entryYear\r\n\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n   }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        // Function that will set different values to state variable based on department selected\r\n        const changeDepartmentOptionHandler = (event) => { \r\n            this.setState({department: event.target.value}); \r\n        }; \r\n        const changeFirstNameHandler = (event) => { \r\n            this.setState({firstName: event.target.value}); \r\n        }; \r\n        const changeLastNameHandler = (event) => { \r\n            this.setState({lastName: event.target.value}); \r\n        }; \r\n        const changeSBUIDHandler = (event) => { \r\n            this.setState({id: event.target.value}); \r\n        }; \r\n        const changeEmailHandler = (event) => { \r\n            this.setState({email: event.target.value}); \r\n        }; \r\n        const changeTrackOptionHandler = (event) => { \r\n            this.setState({track: event.target.value}); \r\n        }; \r\n        const changeEntrySemesterOptionHandler = (event) => { \r\n            this.setState({entrySemester: event.target.value}); \r\n        }; \r\n        const changeEntryYearOptionHandler = (event) => { \r\n            this.setState({entryYear: event.target.value}); \r\n        }; \r\n\r\n\r\n        // Different arrays for different dropdowns \r\n        const ams = [ \"Computational Applied Mathematics\", \"Computational Biology\", \r\n            \"Operations Research\", \"Statistics\", \"Quantitative Finance\"]; \r\n        const bmi = [\"Clinical Informatics\", \"Imaging Informatics\", \"Translational Bioinformatics\"]; \r\n        const ese = [\"None\"]; \r\n        const cse = [\"None\"]; \r\n        \r\n        // Type variable to store different array for different dropdown\r\n        let type = null; \r\n        \r\n        //This will be used to create set of options that user will see\r\n        let options = null; \r\n        \r\n        // Setting Type variable according to dropdown\r\n        if (this.state.department === \"AMS\") { \r\n            type = ams; \r\n        } else if (this.state.department === \"BMI\") { \r\n            type =bmi; \r\n        } else if (this.state.department === \"ESE\") { \r\n            type = ese; \r\n        } else if (this.state.department === \"CSE\") { \r\n            type = cse; \r\n        } \r\n        \r\n        // If \"Type\" is null or undefined then options will be null, otherwise it will create a options iterable based on our array \r\n        if (type) { \r\n            options = type.map((el) => <option key={el}>{el}</option>); \r\n        } \r\n\r\n        return (\r\n            <div>\r\n                {this.state.showModalDialogPopup ? <ModalDialog modalType={this.state.modalType} hideModalDialogPopUp={this.hideModalDialogPopUp.bind(this)} addStudent={this.addStudent.bind(this)}/> : null}\r\n                <div id=\"addStudentForm\">\r\n                    <h2 id=\"addStudentFormHeader\">Student Information</h2>\r\n                    <div>\r\n                        <div className=\"addStudent_prompt\">First Name:</div>\r\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeFirstNameHandler}/>\r\n                        <div className=\"addStudent_prompt\">Last Name:</div>\r\n                        <input className=\"addStudent_input\" type=\"input\" onChange={changeLastNameHandler}/>\r\n                        <div className=\"addStudent_prompt\">SBU ID:</div>\r\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeSBUIDHandler}/>\r\n                        <div className=\"addStudent_prompt\">Email:</div>\r\n                        <input  className=\"addStudent_input\" type=\"input\" onChange={changeEmailHandler}/>\r\n\r\n                        <div className=\"addStudent_prompt\">Department:</div>\r\n                        <select id=\"departmentSelect\" className=\"dropdownSelect\" onChange={changeDepartmentOptionHandler}>\r\n                            <option value=\"AMS\">AMS</option>\r\n                            <option value=\"BMI\">BMI</option>\r\n                            <option value=\"ESE\">ESE</option>\r\n                            <option value=\"CSE\">CSE</option>\r\n                        </select>\r\n                        <div className=\"addStudent_prompt\">Track:</div>\r\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeTrackOptionHandler}>\r\n                            {options}\r\n                        </select>\r\n\r\n                        <div className=\"addStudent_prompt\">Entry Semester:</div>\r\n                        <select id=\"semesterSelect\" className=\"dropdownSelect\" onChange={changeEntrySemesterOptionHandler}>\r\n                            <option value=\"Fall\">Fall</option>\r\n                            <option value=\"Winter\">Winter</option>\r\n                            <option value=\"Spring\">Spring</option>\r\n                            <option value=\"Summer\">Summer1</option>\r\n                            <option value=\"Summer\">Summer2</option>\r\n                        </select>\r\n                    </div>\r\n                        <div className=\"addStudent_prompt\">Entry Year:</div>\r\n                        <select id=\"entryYearSelect\" className=\"dropdownSelect\" onChange={changeEntryYearOptionHandler}>\r\n                            <option value=\"2021\">2021</option>\r\n                            <option value=\"2020\">2020</option>\r\n                            <option value=\"2019\">2019</option>\r\n                            <option value=\"2018\">2018</option>\r\n                            <option value=\"2017\">2017</option>\r\n                            <option value=\"2016\">2016</option>\r\n                            <option value=\"2015\">2015</option>\r\n                            <option value=\"2014\">2014</option>\r\n                            <option value=\"2013\">2013</option>\r\n                            <option value=\"2012\">2012</option>\r\n                            <option value=\"2011\">2011</option>\r\n                            <option value=\"2010\">2010</option>\r\n                            <option value=\"2009\">2009</option>\r\n                            <option value=\"2008\">2008</option>\r\n                            <option value=\"2007\">2007</option>\r\n                            <option value=\"2006\">2006</option>\r\n                            <option value=\"2005\">2005</option>\r\n                            <option value=\"2004\">2004</option>\r\n                            <option value=\"2003\">2003</option>\r\n                            <option value=\"2002\">2002</option>\r\n                            <option value=\"2001\">2001</option>\r\n                            <option value=\"2000\">2000</option>\r\n                            <option value=\"1999\">1999</option>\r\n                            <option value=\"1998\">1998</option>\r\n                            <option value=\"1997\">1997</option>\r\n                            <option value=\"1996\">1996</option>\r\n                            <option value=\"1995\">1995</option>\r\n                            <option value=\"1994\">1994</option>\r\n                            <option value=\"1993\">1993</option>\r\n                            <option value=\"1992\">1992</option>\r\n                            <option value=\"1991\">1991</option>\r\n                            <option value=\"1990\">1990</option>\r\n                        </select>\r\n                        <br></br><br></br>\r\n                        <button id=\"addStudentForm_submit_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"addStudent\")}>Add Student</button>\r\n                        <button id=\"addStudentForm_cancel_button\" className=\"addStudent_button\" onClick={() => this.showModalDialogPopUp(\"cancelAddStudent\")}>Cancel</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStudentScreen;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass LoggedInLinks extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"right\">\r\n          <NavLink to=\"/\"><button id=\"homeButton\" className=\"navBarButtons\">Home</button></NavLink>\r\n          <NavLink to=\"/\"><button id=\"logOutButton\" className=\"navBarButtons\">Log Out</button></NavLink>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LoggedInLinks;","import React from 'react';\r\nimport LoggedInLinks from './LoggedInLinks';\r\n\r\nclass Navbar extends React.Component {\r\n  \r\n  render() {\r\n    const links = <LoggedInLinks />;\r\n\r\n    return (\r\n      <nav id=\"navbar\" className=\"banner\">\r\n        <div className=\"container\">\r\n          <b id=\"logo\">MAST</b>\r\n          {links}\r\n        </div>\r\n      </nav>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\n//Import Components\r\nimport LoginScreen from './components/login_screen/LoginScreen.js';\r\nimport GPDHomeScreen from './components/home_screen/GPDHomeScreen.js';\r\nimport AddStudentScreen from './components/add_student/AddStudentScreen.js';\r\nimport Navbar from './components/navbar/Navbar.js';\r\n\r\nclass App extends Component{\r\n  render() {\r\n    return (\r\n          <BrowserRouter>\r\n            <div className=\"App\">\r\n            <Navbar />\r\n              <Switch>\r\n                <Route path=\"/login\" component={LoginScreen} />\r\n                <Route exact path=\"/\" component={GPDHomeScreen} />\r\n                <Route exact path=\"/addStudent\" component={AddStudentScreen} />\r\n              </Switch>\r\n            </div>\r\n          </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nexport  default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from './App';\r\n\r\nimport './css/style.css'\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}